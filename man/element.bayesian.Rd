% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/element_bayesian.R
\name{element.bayesian}
\alias{element.bayesian}
\title{Runs a mixed model with Bernoulli distribution for each of the elements in the dataset, allows to test how multiple predictors and random effects influence the probability that an element occurrs}
\usage{
element.bayesian(
  netfacs.data,
  test.elements = NULL,
  formula,
  predictors,
  warmup = 1000,
  iter = 2000,
  autocorrelation = F
)
}
\arguments{
\item{netfacs.data}{object resulting from netfacs() function}

\item{formula}{character vector of fixed and random effects, of the format '~ fixed effect 1 + fixed effect 2 + (1|random effect)'}

\item{predictors}{named list with the vectors for each predictor specified in the formula (e.g. 'list(fixed effect 1 = data$fixed.effect1)')}

\item{warmup}{number of warmup iterations for the Bayesian analysis}

\item{iter}{number of iterations for the Bayesian analysis}

\item{autocorrelation}{should the Bayesian analysis include an autocorrelation term (only for analyses including a random effect and having time series data)}
}
\value{
Function returns for each element the result object of the brms analysis, the estimates for each level of factors, and a distribution plot for factors
}
\description{
Very basic Bayesian application, takes the dataset from the netfacs object, you define the formula (fixed effects, random effects; ' ~ fixed effect + (1|random effect)') and add the predictors as a named list, and it fits a linear mixed model with Bernoulli distribution for binary data using brms package and presents the probabilities of each element under the different fixed effects
}
\examples{
### how do angry facial expressions differ from non-angry ones?
data(emotions_set)
angry.face = netfacs(data = emotions_set[[1]],
 condition = emotions_set[[2]]$emotion,
 test.condition = 'anger',
 null.condition = NULL,
 duration = NULL, 
 ran.trials = 100,
 control = NULL,
 random.level = NULL,
 combination.size = 5)
 
 ### this takes a while
 bayesian.results = element.bayesian(netfacs.data = angry.face, test.elements = c('1', '23', '4'), formula = '~emotion', predictors = list(emotion = emotions_set[[2]]$emotion), warmup = 1000, iter = 2000, autocorrelation = F)
}
